name: PR Workflow Failure
description: "Check the status of specified workflows on PRs and creates a comment with the status. Optionally send a Slack notification."

inputs:
  workflows:
    description: "List of workflows names to check"
    required: true
    default: '[]'
  slack_webhook:
    description: "Slack webhook URL"
    required: false
  slack_body:
    description: "Slack message body with placeholders for statuses, pr_title, repo_name, pr_creator, pr_url"
    required: false
    default: 'Workflow statuses:\n$STATUSES\nPR Details:\n<$PR_URL|PR> - $PR_TITLE by $PR_CREATOR in $REPO_NAME.\n$PR_URL'
  github_token:
    description: "GitHub token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Check workflow status
      id: check-status
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const workflowNames = JSON.parse('${{ inputs.workflows }}');
          const repo = context.repo.repo;
          const owner = context.repo.owner;
          const statuses = [];
          let failed = false;

          // Fetch all workflows
          const workflows = await github.rest.actions.listRepoWorkflows({
            owner,
            repo
          });

          // Match workflows by name and get their IDs
          const workflowIds = workflowNames.map(name => {
            const workflow = workflows.data.workflows.find(w => w.name === name);
            if (workflow) {
              return { id: workflow.id, name: workflow.name };
            } else {
              statuses.push(`${name}: Not found`);
              return null;
            }
          }).filter(Boolean);

          // Check the status of matched workflows
          for (const { id, name } of workflowIds) {
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: id,
              per_page: 1
            });
            const status = runs.data.workflow_runs.length > 0 ? runs.data.workflow_runs[0].conclusion : 'No runs found';
            statuses.push(`${name}: ${status}`);
            if (status !== 'success') {
              failed = true;
            }
          }

          core.exportVariable('STATUSES', statuses.join('\n'));
          core.exportVariable('FAILED', failed);

    - name: Create comment with workflow status
      if: ${{ env.FAILED == 'true' }}
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const statuses = process.env.STATUSES;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `## Workflow statuses:\n${statuses}`
          });

    - name: Send Slack notification
      if: ${{ env.FAILED == 'true' && inputs.slack_webhook != '' }}
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook }}
        STATUSES: ${{ env.STATUSES }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        REPO_NAME: ${{ github.repository }}
        PR_CREATOR: ${{ github.event.pull_request.user.login }}
        PR_URL: ${{ github.event.pull_request.html_url }}
        SLACK_MESSAGE: ${{ inputs.slack_body }}
      shell: bash
      run: |
        message=$(echo "$SLACK_MESSAGE" | sed "s/\${statuses}/$STATUSES/" | sed "s/\${pr_title}/$PR_TITLE/" | sed "s/\${repo_name}/$REPO_NAME/" | sed "s/\${pr_creator}/$PR_CREATOR/" | sed "s/\${pr_url}/$PR_URL/")
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$message\"}" \
        $SLACK_WEBHOOK_URL